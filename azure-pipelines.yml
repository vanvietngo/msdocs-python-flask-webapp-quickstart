# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
  - main

pool: azuredevopsagentpool

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureServiceConnectionId: "azzuredevopsconnection"

  # Web app name
  webAppName: "Azuredevops"

  # Environment name
  environmentName: "venv"

  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)

stages:
  - stage: Build
    displayName: Build stage
    jobs:
      - job: BuildJob
        pool: azuredevopsagentpool
        steps:
          - script: |
              python -m venv antenv
              source antenv/bin/activate
              python -m pip install --upgrade pip
              pip install setup
              pip install -r requirements.txt
            workingDirectory: $(projectRoot)
            displayName: "Install requirements"

          - script: |
              # export PATH=$HOME/.local/bin:$PATH
              	
              # pylint --disable=R,C,W1203 app.py
            workingDirectory: $(projectRoot)
            displayName: "Run lint tests"

          - script: |
              echo $(projectRoot)
              pwd
              ls -la
          - task: ArchiveFiles@2
            displayName: "Archive files"


            inputs:
              rootFolderOrFile: "$(projectRoot)"
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
              replaceExistingArchive: true

          - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
            displayName: "Upload package"
            artifact: drop

  - stage: Deploy
    displayName: "Deploy Web App"
    dependsOn: Build
    condition: succeeded()
    jobs:
      - deployment: DeploymentJob
        pool: azuredevopsagentpool
        environment: $(environmentName)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: "Deploy Azure Web App : flask-ml-service"
                  inputs:
                    azureSubscription: $(azureServiceConnectionId)
                    appName: $(webAppName)
                    package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
